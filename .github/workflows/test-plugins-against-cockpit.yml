name: Run tests against shell versions
on:
  workflow_call:
    inputs:
      non_deprecated_shell_versions:
        required: true
        type: string

jobs:
  test-plugins-against-cockpit:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        version_data: ${{ fromJson(inputs.non_deprecated_shell_versions) }}
    env:
      JSON: ${{ toJson(matrix.version_data) }}
      VERSION: ${{ matrix.version_data.version }}
      MAJOR: ${{ matrix.version_data.major }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist/sag-pkg-community-plugins/

      - name: Copy files for http-server into apps subfolder
        run: |
          mkdir -p dist/apps/sag-pkg-community-plugins
          cp -r dist/sag-pkg-community-plugins/* dist/apps/sag-pkg-community-plugins

      - name: Get shell app of particular version
        run: |
          set -e  # Exit the script if any command fails
          # Get shell version from current env
          shell_version="${{ env.VERSION }}"
          echo "Shell version is: $shell_version"

          # Construct the file URL
          file_url="http://resources.cumulocity.com/webapps/ui-releases/apps-${shell_version}.tgz"
          echo "Shell file url is: $file_url"

          # Download the file
          echo "Downloading file..."
          curl -O $file_url
          if [ ! -f "apps-${shell_version}.tgz" ]; then
            echo "Downloaded file not found!"
            exit 1
          fi
          echo "File downloaded successfully."

          # Extract the downloaded tar.gz file
          echo "Extracting apps from downloaded file..."
          tar -xzf "apps-${shell_version}.tgz"
          if [ $? -ne 0 ]; then
            echo "Extraction failed!"
            exit 1
          fi
          echo "Apps extracted successfully."

          # Unzip Cockpit to dist/apps
          cockpit_file="cockpit-${shell_version}.zip"
          destination_folder="dist/apps/cockpit"
          mkdir -p "$destination_folder"
          unzip -qq "$cockpit_file" -d "$destination_folder"
          if [ $? -ne 0 ]; then
            echo "Extracting cockpit file failed!"
            exit 1
          fi
          echo "Cockpit extracted successfully."

          # Echo the elements of dist/apps
          echo "Contents of dist/apps:"
          ls dist/apps

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm run cypress:ctrl
          install: false
          wait-on: 'http://localhost:4200/apps/cockpit/index.html?remotes=%7B"sag-pkg-community-plugins"%3A%5B"ExampleWidgetPluginModule"%2C"DatapointsGraphWidgetModule"%5D%7D#'
          browser: chrome
          record: false
          config-file: cypress.config.ts
          env: C8Y_CTRL_MODE=mocking,grepTags=@${{ env.MAJOR }}

      - name: Upload cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          retention-days: 5
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          retention-days: 5
          name: cypress-videos
          path: cypress/videos
