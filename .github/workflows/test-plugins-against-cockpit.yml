name: Test plugins against Cockpit

on:
  pull_request:
  schedule:
    - cron: '15 4 * * 1-5'

permissions:
  contents: read

env:
  ACTIONS_STEP_DEBUG: true

jobs:
  collect-shell-versions:
    timeout-minutes: 30
    runs-on: ubuntu-22.04
    outputs:
      shell_versions: ${{ steps.filter-versions.outputs.shell_versions }}
      plugins_version: ${{ steps.extract-plugins-version.outputs.plugins_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Extract Plugins Version
        id: extract-plugins-version
        run: |
          plugins_version=$(jq -r '.version' package.json)
          echo "plugins_version=${plugins_version}" >> $GITHUB_ENV
          echo "::set-output name=plugins_version::${plugins_version}"

      - name: Collect Shell Versions
        id: collect-shell-versions
        uses: SoftwareAG/plugins-e2e-setup/collect-shell-versions@main

      - name: Verify shell versions output
        run: echo "Collected shell versions ${{ steps.collect-shell-versions.outputs.shell_versions }}"

      - name: Retrieve cached JSON files
        id: retrieve-cache
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/cache@v4
        with:
          path: ./cache-files
          key: cache-json-files-${{ runner.os }}-plugins-${{ steps.extract-plugins-version.outputs.plugins_version }}
          restore-keys: |
            cache-json-files-${{ runner.os }}-plugins-${{ steps.extract-plugins-version.outputs.plugins_version }}

      - name: Check and filter already tested versions
        id: filter-versions
        run: |
          echo "Filtered shell versions:"
          shell_versions='${{ steps.collect-shell-versions.outputs.shell_versions }}'
          plugins_version='${{ steps.extract-plugins-version.outputs.plugins_version }}'

          filtered_versions=$(echo '[]' | jq -c)

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            for version_data in $(echo "${shell_versions}" | jq -c '.[]'); do
              version_tag=$(echo "$version_data" | jq -r '.tag')
              version=$(echo "$version_data" | jq -r '.version')
              cache_file="./cache-files/${version_tag}-${plugins_version}.json"

              if [ -f "$cache_file" ]; then
                alreadyTestedShellVersion=$(jq -r '.shellVersion' "$cache_file")
                alreadyTestedPluginsVersion=$(jq -r '.pluginsVersion' "$cache_file")
                if [[ "$alreadyTestedShellVersion" == "$version" && "$alreadyTestedPluginsVersion" == "$plugins_version" ]]; then
                  echo "- $version_tag ($version) with plugins version $plugins_version: already tested"
                  continue
                fi
              fi
              echo "- $version_tag ($version) with plugins version $plugins_version: not tested"
              filtered_versions=$(echo "$filtered_versions" | jq -c ". += [$version_data]")
            done
          else
            filtered_versions=$shell_versions
          fi

          echo "::set-output name=shell_versions::$filtered_versions"
          echo "Final shell versions to test: $filtered_versions"

  build-plugins:
    needs: collect-shell-versions
    if: ${{ fromJson(needs.collect-shell-versions.outputs.shell_versions) != '[]' }}
    timeout-minutes: 30
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          if-no-files-found: error
          retention-days: 5
          path: |
            dist/sag-pkg-community-plugins/**

  run-tests-against-shell:
    needs: [collect-shell-versions, build-plugins]
    if: ${{ fromJson(needs.collect-shell-versions.outputs.shell_versions) != '[]' }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        version_data: ${{ fromJson(needs.collect-shell-versions.outputs.shell_versions) }}
    env:
      JSON: ${{ toJson(matrix.version_data) }}
      VERSION: ${{ matrix.version_data.version }}
      TAG: ${{ matrix.version_data.tag }}
      PLUGINS_VERSION: ${{ needs.collect-shell-versions.outputs.plugins_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist/apps/sag-pkg-community-plugins/

      - name: Get shell app of particular version
        uses: SoftwareAG/plugins-e2e-setup/get-shell-app@main
        with:
          shell-name: cockpit
          shell-version: ${{ env.VERSION }}
          shell-path: dist/apps

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm run cypress:ctrl
          install: false
          wait-on: 'http://localhost:4200/apps/cockpit/index.html?remotes=%7B"sag-pkg-community-plugins"%3A%5B"ExampleWidgetPluginModule"%2C"DatapointsGraphWidgetModule"%5D%7D#'
          browser: chrome
          record: false
          config-file: cypress.config.ts
          env: C8Y_CTRL_MODE=mocking,C8Y_CTRL_PROVIDER_VERSION=${{ env.VERSION }}

      - name: Upload cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 5
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload cypress videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 5
          name: cypress-videos
          path: cypress/videos

      - name: Create or update JSON file
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          mkdir -p ./cache-files
          file="./cache-files/${{ env.TAG }}-${{ env.PLUGINS_VERSION }}.json"
          now=$(date --utc +"%Y-%m-%dT%H:%M:%SZ")
          jq -n --arg shellVersion "${{ env.VERSION }}" --arg pluginsVersion "${{ env.PLUGINS_VERSION }}" --arg lastSuccess "$now" '{shellVersion: $shellVersion, pluginsVersion: $pluginsVersion, lastSuccess: $lastSuccess}' > $file
          cat $file

      - name: Upload updated JSON file to cache
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/cache@v4
        with:
          path: ./cache-files
          key: cache-json-files-${{ runner.os }}-plugins-${{ env.PLUGINS_VERSION }}
