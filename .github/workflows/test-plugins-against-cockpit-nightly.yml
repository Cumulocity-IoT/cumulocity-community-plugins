name: Test plugins against Cockpit
on:
  pull_request:
  schedule:
    - cron: '15 4 * * 1-5'

permissions:
  contents: read

env:
  ACTIONS_STEP_DEBUG: true

jobs:
  collect-shell-versions:
    timeout-minutes: 30
    runs-on: ubuntu-22.04
    outputs:
      shell_versions: ${{ steps.collect-shell-versions.outputs.shell_versions }}

    steps:
      - name: Collect Shell Versions
        id: collect-shell-versions
        uses: SoftwareAG/plugins-e2e-setup/collect-shell-versions@main

      - name: Verify shell versions output
        run: echo "Collected shell versions ${{ steps.collect-shell-versions.outputs.shell_versions }}"

  build-plugins:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          if-no-files-found: error
          retention-days: 5
          path: |
            dist/sag-pkg-community-plugins/**

  run-tests-against-shell:
    needs: [collect-shell-versions, build-plugins]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        version_data: ${{ fromJson(needs.collect-shell-versions.outputs.shell_versions) }}
    env:
      JSON: ${{ toJson(matrix.version_data) }}
      VERSION: ${{ matrix.version_data.version }}
      MAJOR: ${{ matrix.version_data.major }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist/apps/sag-pkg-community-plugins/

      - name: Restore version cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: cache/ # Specify the path where the cache file will be stored
          key: ${{ env.VERSION }}

      - name: Check if version is cached
        id: check-cache
        run: |
          if [ -f "cache/${{ env.VERSION }}" ]; then
            echo "Version $VERSION is already cached."
            echo "cached=true" >> $GITHUB_ENV
          else
            echo "cached=false" >> $GITHUB_ENV
          fi

      - name: Skip or run tests based on cache
        if: env.cached == 'false'
        run: echo "Running tests as version is not cached."

      - name: Get shell app of particular version
        if: env.cached == 'false'
        uses: SoftwareAG/plugins-e2e-setup/get-shell-app@main
        with:
          shell-name: cockpit
          shell-version: ${{ env.VERSION }}
          shell-path: dist/apps

      - name: Cypress run
        if: env.cached == 'false'
        uses: cypress-io/github-action@v5
        with:
          start: npm run cypress:ctrl
          install: false
          wait-on: 'http://localhost:4200/apps/cockpit/index.html?remotes=%7B"sag-pkg-community-plugins"%3A%5B"ExampleWidgetPluginModule"%2C"DatapointsGraphWidgetModule"%5D%7D#'
          browser: chrome
          record: false
          config-file: cypress.config.ts
          env: C8Y_CTRL_MODE=mocking,grepTags=@${{ env.MAJOR }}

      - name: Upload cypress screenshots
        if: failure() && env.cached == 'false'
        uses: actions/upload-artifact@v4
        with:
          retention-days: 5
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload cypress videos
        if: always() && env.cached == 'false'
        uses: actions/upload-artifact@v4
        with:
          retention-days: 5
          name: cypress-videos
          path: cypress/videos

      - name: Save version cache
        if: success() && env.cached == 'false'
        run: |
          echo "{\"lastSuccess\": \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"}" > cache/${{ env.VERSION }}
        # Save the cache only if the tests run successfully and the version was not already cached
        uses: actions/cache@v4
        with:
          path: cache/
          key: ${{ env.VERSION }}
